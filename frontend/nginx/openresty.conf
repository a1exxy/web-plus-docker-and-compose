
log_format log_req_resp '$remote_addr - $remote_user [$time_local] '
  '"$request" $status $body_bytes_sent '
  '"$http_referer" "$http_user_agent" $request_time req_body:"$request_body" resp_body:"$resp_body" '
  'req_headers:"$req_header" resp_headers:"$resp_header"';

error_log /dev/stderr;

server {
    listen 80;
    server_name _;
    location /ping {
        return 200 "pong";
    }
    # error_page  404              /404.html;
    # error_page   500 502 503 504  /50x.html;
    location / {
        root   /usr/local/openresty/nginx/html;
        index  index.html;
        access_log /dev/stdout log_req_resp;
        # Исправляем роутинг на фронтенде
        try_files $uri $uri/ /index.html;

        lua_need_request_body on;
        set $resp_body "";
        body_filter_by_lua '
          local resp_body = string.sub(ngx.arg[1], 1, 1000)
          ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
          if ngx.arg[2] then
            ngx.var.resp_body = ngx.ctx.buffered
          end
        ';

        set $req_header "";
        set $resp_header "";
        header_filter_by_lua '
          local h = ngx.req.get_headers()
          for k, v in pairs(h) do
            if (type(v) == "table") then
              ngx.var.req_header = ngx.var.req_header .. k.."="..table.concat(v,",").." "
            else
              ngx.var.req_header = ngx.var.req_header .. k.."="..v.." "
            end
          end
          local rh = ngx.resp.get_headers()
          for k, v in pairs(rh) do
            ngx.var.resp_header = ngx.var.resp_header .. k.."="..v.." "
          end
          ';

    }
}