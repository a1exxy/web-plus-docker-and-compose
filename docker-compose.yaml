version: '3.4'
services:

  database:
    container_name: database
    image: postgres:14
    restart: unless-stopped
    volumes:
      - postgres_data_vol:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PORT=${DB_PORT}
    networks:
      - backend

  backend:
    container_name: backend
    build:
      context: backend
    depends_on:
      - database
    env_file:
      - .env
    restart: unless-stopped
    ports:
      - ${BACK_PORT}:3000
    healthcheck:
      test: "wget -nv -t1 --spider 'http://localhost:3000'/'"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend

  frontend:
    container_name: frontend
    build:
      context: frontend
      args:
        REACT_APP_API_URL: https://${BACKEND_DOMAIN}
    restart: unless-stopped
    volumes:
      - ./frontend/nginx/openresty.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - ${FRONT_PORT}:80
    healthcheck:
      test: "wget -nv -t1 --spider 'http://localhost:80/'"
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      frontend:

volumes:
  postgres_data_vol:

networks:
  frontend:
  backend:
